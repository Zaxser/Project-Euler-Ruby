# Highly divisible triangular number

# Problem 12
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

require "set"

class Integer
  def th_triangle
    (self * (self + 1)) / 2
  end

  def divisors
    divisors = SortedSet.new([1, self])
    n = 2
    until n * n > self
      divisors += [n, self / n] if self % n == 0
      n += 1
    end
    return divisors
  end
end

def triangle_divisors_test()
  7.times do |n|
    triangle = (n + 1).th_triangle
    divisors = triangle.divisors
    p [triangle, divisors, divisors.length]
  end
end

triangle_divisors_test

n, triangle, divisors = 1, 1, [1]
until divisors.length > 500
  n += 1
  triangle = n.th_triangle
  divisors = triangle.divisors
end
p triangle