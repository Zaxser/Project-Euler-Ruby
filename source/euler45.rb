# Triangular, pentagonal, and hexagonal

# Problem 45
# Triangle, pentagonal, and hexagonal numbers are generated by the following 
# formulae:

# Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
# Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
# Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
# It can be verified that T285 = P165 = H143 = 40755.

# Find the next triangle number that is also pentagonal and hexagonal.

class Integer
  def nth_triangle
    self / 2 * (self + 1)
  end

  # n / 2 * (n + 1) = t
  # 2t = n * (n + 1) # Sanity Check: 110 = 10 * (10 + 1) # Good!
  # 2t = n^2 + n # 110 = 10^2 + 10
  # Quadratic Formula?
  # n^2 + n -2t = 0
  # n = (-1 +- sqrt(1^2 + 4(a2t))) / 2
  # n = (-1 +- sqrt(1 + 8t)) / 2
  # It turns out, a number t is a triangular number if 8t + 1 is a perfect
  # square.

  def triangle_index()
    (Math.sqrt(1 + (8 * self)) - 1) / 2
  end

  def triangular?
    (self.triangle_index % 1).zero?
  end

  def nth_pentagonal
    self * (3 * self - 1) / 2
  end

  # p = n * (3 * n - 1) / 2
  # 2p = n * (3n - 1)
  # 2p = 3n^2 - n
  # 3n^2 - n - 2p = 0
  # Quadratic Formula!
  # n = 1 +- Math.sqrt(1 - 4(3)(-2)p) / 2(3)
  # n = 1 + Math.sqrt(1 + 24p) / 6
  def pentagonal_index
    (1 + Math.sqrt(24 * self.abs + 1)) / 6
  end

  def pentagonal?
    (self.pentagonal_index % 1).zero?
  end

  def nth_hexagonal
    self * (2 * self - 1)
  end

  # h = n * (2n - 1)
  # h = 2n^2 - n
  # 2n^2 - n - h
  # Quadratic Formula!
  # (--1 + Math.sqrt(1^2 - 4(2)(-1)h)) / 2(2)
  # (1 + Math.sqrt(1 + 8 * h)) / 4

  def hexagonal_index
    (1 + Math.sqrt(1 + 8 * self)) / 4
  end

  def hexagonal?
    (self.hexagonal_index % 1).zero?
  end
end

# Quick Tests; Seem good
p 40755.triangular?
p 40755.pentagonal?
p 40755.hexagonal?
p 143.nth_hexagonal

n = 144
hexagonal = n.nth_hexagonal
until hexagonal.triangular? and hexagonal.pentagonal?
  n += 1
  hexagonal = n.nth_hexagonal
end
p hexagonal